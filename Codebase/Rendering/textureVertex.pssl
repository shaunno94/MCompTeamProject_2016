
ConstantBuffer modelMatrix
{
	column_major matrix modelMatrix;
};

ConstantBuffer invModelMat
{
	column_major matrix invModelMat;
};

ConstantBuffer viewMatrix
{
	column_major matrix viewMatrix;
};
ConstantBuffer projMatrix
{
	column_major matrix projMatrix;
};
ConstantBuffer textureMatrix
{
	column_major matrix textureMatrix;
};

struct VS_INPUT
{
	float3 position		: POSITION0;
	float2 texCoord		: TEXCOORD0;
	float3 normal		: NORMAL;
	float3 tangent      : TANGENT;
};

struct VS_OUTPUT
{
	float4 position		: S_POSITION;
	float2 texCoord		: TEXCOORD0;
	float3 normal		: NORMAL;
};

VS_OUTPUT main(VS_INPUT Input)
{
	VS_OUTPUT Output;

	float4x4 MVP = mul(mul(projMatrix, viewMatrix), modelMatrix);
	Output.position = mul(MVP, float4(Input.position.xyz, 1.0));

	float3x3 normalMatrix = float3x3(invModelMat); //Inverse transpose done on CPU.
	Output.normal = normalize(mul(normalMatrix,normalize(Input.normal)));

	Output.texCoord = mul(textureMatrix, float4(Input.texCoord.xy, 1, 1)).xy;
	return Output;
}
